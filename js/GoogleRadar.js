GoogleRadar = function (a, t) { return a instanceof Object == 0 ? !1 : t && t.lat && t.lng ? (this.map = a, this.id = t && t.id || "radar_" + Math.random(), this.setCenter(t.lat, t.lng), this.hasCircle = !1, this.aMarkers = new Array, this.aCircles = new Array, void (this.EarthRadius = 6371)) : !1 }, GoogleRadar.prototype.setCenter = function (a, t) { this.lat = a, this.lng = t, this.center = new google.maps.LatLng(this.lat, this.lng) }, GoogleRadar.prototype.drawAxis = function (a) { if ("undefined" == typeof this.axis && (this.axis = {}, this.axis.radius = a && a.radius || 1e3, this.axis.n = a && a.n || 10), this.aCircles.length > 1) return !1; for (n = 0; n <= this.axis.n; n++) { var t = { center: this.center, clickable: !1, fillColor: a && a.fillColor || "#00FF00", fillOpacity: a && a.fillOpacity || .1, map: this.map, radius: this.axis.radius * n, strokeColor: a && a.strokeColor || "#00FF00", strokeOpacity: a && a.strokeOpacity || .5, strokeWeight: a && a.strokeWeight || 4, zIndex: a && a.zIndex || 4 }, r = new google.maps.Circle(t); this.aCircles.push(r) } }, GoogleRadar.prototype.undrawAxis = function () { for (n = 0; n <= this.axis.n; n++)this.aCircles[n].setMap(null), this.aCircles[n] = null; this.aCircles = new Array, this.axis = void 0 }, GoogleRadar.prototype.addRadarLine = function (a) { if ("undefined" == typeof this.radarLine) { this.radarLine = {}, this.radarLine.id = a && a.id || "line_" + Math.random(), this.radarLine.radius = a && a.radius || .5, this.radarLine.time = a && a.time || 100, this.radarLine.angle = a && a.angle || 0, this.radarLine.angleOrigin = a && a.angleOrigin || 0, this.radarLine.angleIncrease = a && a.angleIncrease || 5, this.radarLine.angleMaxOverture = a && a.angleMaxOverture || 10, this.radarLine.lapCurrent = 0, this.radarLine.lapMax = a && a.lapMax || 0, a && "boolean" == typeof a.autostart ? this.radarLine.autostart = a.autostart : this.radarLine.autostart = !0; var t = this.destinationPoint(this.center, this.radarLine.radius, this.radarLine.angle), r = [new google.maps.LatLng(this.lat, this.lng), t]; this.radarLine.shape = new google.maps.Polyline({ clickable: !1, geodesic: !1, map: this.map, path: r, strokeColor: a && a.color || "rgba(146, 167, 13, 0.85)", strokeOpacity: a && a.opacity || "0.5", strokeWeight: a && a.weight || 1, zIndex: a && a.zIndex || 2 }) } else if (null != this.radarLine.callback) return !1; this.radarLine.autostart && this.rotateLine() }, GoogleRadar.prototype.rotateLine = function () { if (!this.radarLine.angle && !this.radarLine.time && !this.radarLine.radius) return !1; var a = this.destinationPoint(this.center, this.radarLine.radius, this.radarLine.angle), t = [this.center, a]; if (this.radarLine.shape.setPath(t), null != this.aMarkers) for (var r = 0; r < this.aMarkers.length; r++) { var e = this.bearingTo(this.center, this.aMarkers[r].getPosition()), i = this.distanceFrom(this.center, this.aMarkers[r].getPosition()); this.radarLine.angle == this.radarLine.angleOrigin && (this.aMarkers[r].hasbeenShown = !1), !this.aMarkers[r].hasbeenShown && e < this.radarLine.angle + this.radarLine.angleMaxOverture / 2 && e > this.radarLine.angle - this.radarLine.angleMaxOverture / 2 && i < this.radarLine.radius && (this.aMarkers[r].handle && this.aMarkers[r].handle(), this.aMarkers[r].hasbeenShown = !0) } this.lapsAndLoops(this.radarLine, "rotateLine") }, GoogleRadar.prototype.stopLine = function () { window.clearTimeout(this.radarLine.callback), this.radarLine.callback = null }, GoogleRadar.prototype.forceStartLine = function () { this.radarLine.autostart = !0, this.radarLine.autostart && this.rotateLine() }, GoogleRadar.prototype.hideLine = function () { this.radarLine.shape.setVisible(!1) }, GoogleRadar.prototype.showLine = function () { this.radarLine.shape.setVisible(!0) }, GoogleRadar.prototype.addRadarPolygon = function (a) { if ("undefined" == typeof this.radarPolygon) this.radarPolygon = {}, this.radarPolygon.id = a && a.id || "polygon_" + Math.random(), this.radarPolygon.radius = a && a.radius || 1, this.radarPolygon.time = a && a.time || 100, this.radarPolygon.angle = a && a.angle || 0, this.radarPolygon.angleOrigin = a && a.angleOrigin || 0, this.radarPolygon.angleIncrease = a && a.angleIncrease || 5, this.radarPolygon.angleMaxOverture = 10, this.radarPolygon.shapeCoords = a && a.shapeCoords || [this.center, this.destinationPoint(this.center, this.radarPolygon.radius, this.radarPolygon.angleMaxOverture / 2), this.destinationPoint(this.center, this.radarPolygon.radius, -this.radarPolygon.angleMaxOverture / 2), this.center], this.radarPolygon.lapCurrent = 0, this.radarPolygon.lapMax = a && a.lapMax || 0, a && "boolean" == typeof a.autostart ? this.radarPolygon.autostart = a.autostart : this.radarPolygon.autostart = !0, this.radarPolygon.shape = new google.maps.Polygon({ clickable: !1, fillColor: a && a.fillColor || "#FF0000", fillOpacity: a && a.fillOpacity || "0.5", geodesic: !1, map: this.map, paths: this.radarPolygon.shapeCoords, strokeColor: a && a.strokeColor || "#FF0000", strokeOpacity: a && a.strokeOpacity || .8, strokeWeight: a && a.strokeWeight || 2, zIndex: a && a.zIndex || 6 }); else if (null != this.radarPolygon.callback) return !1; this.radarPolygon.autostart && this.rotatePolygon() }, GoogleRadar.prototype.rotatePolygon = function (a) { if (!this.radarPolygon.angle && !this.radarPolygon.time && !this.radarPolygon.angleIncrease) return !1; for (this.radarPolygon.shapeCylindric = new Array, i = 0; i < this.radarPolygon.shapeCoords.length; i++)this.radarPolygon.shapeCylindric.push({ distance: this.distanceFrom(this.center, this.radarPolygon.shapeCoords[i]), angle: this.bearingTo(this.center, this.radarPolygon.shapeCoords[i]) }); this.rotateInArray(a) }, GoogleRadar.prototype.rotateInArray = function (a) { for (var t = [], r = 0; r < this.radarPolygon.shapeCylindric.length; r++) { var e = this.destinationPoint(this.center, this.radarPolygon.shapeCylindric[r].distance, this.radarPolygon.shapeCylindric[r].angle + this.radarPolygon.angle); t.push(e) } this.radarPolygon.shape.setPath(t), this.detectMarkers(this.radarPolygon), ("boolean" == typeof a && 0 == a || null == a) && this.lapsAndLoops(this.radarPolygon, "rotateInArray") }, GoogleRadar.prototype.stopPolygon = function () { window.clearTimeout(this.radarPolygon.callback), this.radarPolygon.callback = null }, GoogleRadar.prototype.forceStartPolygon = function () { this.radarPolygon.autostart = !0, this.radarPolygon.autostart && this.rotatePolygon() }, GoogleRadar.prototype.hidePolygon = function () { this.radarPolygon.shape.setVisible(!1) }, GoogleRadar.prototype.showPolygon = function () { this.radarPolygon.shape.setVisible(!0) }, GoogleRadar.prototype.justRotatePolygon = function (a) { this.radarPolygon.angle += a, this.rotatePolygon(!0) }, GoogleRadar.prototype.lapsAndLoops = function (a, t) { (0 == a.lapMax || a.lapCurrent < a.lapMax) && (a.angle = (a.angle + a.angleIncrease) % 360, "object" == typeof GoogleRadar.aRadars || (GoogleRadar.aRadars = new Array), GoogleRadar.aRadars[a.id] = this, a.callback = window.setTimeout('GoogleRadar.aRadars["' + a.id + '"].' + t + "()", a.time), a.angle == a.angleOrigin && a.lapCurrent++) }, GoogleRadar.prototype.detectMarkers = function (a) { if (null != this.aMarkers) for (var t = 0; t < this.aMarkers.length; t++) { this.bearingTo(this.center, this.aMarkers[t].getPosition()), this.distanceFrom(this.center, this.aMarkers[t].getPosition()); a.angle == a.angleOrigin && (this.aMarkers[t].hasbeenShown = !1), !this.aMarkers[t].hasbeenShown && google.maps.geometry.poly.containsLocation(this.aMarkers[t].getPosition(), a.shape) && (this.aMarkers[t].handle && this.aMarkers[t].handle(), this.aMarkers[t].hasbeenShown = !0) } }, GoogleRadar.prototype.addMarker = function (a) { if (null == a.lat || null == a.lng || null == a.id || null == a.iconUrl) return !1; if ("undefined" == typeof this.aMarkers) return !1; var t = new google.maps.Marker({ map: this.map, draggable: !1, position: new google.maps.LatLng(a.lat, a.lng), icon: a.iconUrl || null, handle: a.handle || null, id: a.id, visible: null == a.visible && !0 }); this.aMarkers.push(t) }, GoogleRadar.prototype.removeMarker = function (a) { if (null != a) for (i = 0; i < this.aMarkers.length; i++)this.aMarkers[i].id == a.id && (this.aMarkers[i].setVisible(!1), this.aMarkers[i].setPosition(null), this.aMarkers[i].unbindAll(), this.aMarkers[i] = void 0, this.aMarkers.splice(i, 1)) }, GoogleRadar.prototype.addSetOfMarkersToDetect = function (a) { for (i = 0; i < a.length; i++)this.addMarker(a[i]) }, GoogleRadar.prototype.removeSetOfMarkersToDetect = function (a) { for (j = 0; j < a.length; j++)this.removeMarker(a[j]) }, "undefined" == typeof Number.prototype.toRad && (Number.prototype.toRad = function () { return this * Math.PI / 180 }), "undefined" == typeof Number.prototype.toDeg && (Number.prototype.toDeg = function () { return this / Math.PI * 180 }), GoogleRadar.prototype.distanceFrom = function (a, t) { var r = this.EarthRadius, e = (t.lat() - a.lat()).toRad(), i = (t.lng() - a.lng()).toRad(), o = Math.sin(e / 2) * Math.sin(e / 2) + Math.cos(a.lat().toRad()) * Math.cos(t.lat().toRad()) * Math.sin(i / 2) * Math.sin(i / 2), n = 2 * Math.atan2(Math.sqrt(o), Math.sqrt(1 - o)), s = r * n; return s }, GoogleRadar.prototype.destinationPoint = function (a, t, r) { t = "number" == typeof t ? t : "string" == typeof t && "" != t.trim() ? +t : NaN, t /= this.EarthRadius, r = r.toRad(); var e = a.lat().toRad(), i = a.lng().toRad(), o = Math.asin(Math.sin(e) * Math.cos(t) + Math.cos(e) * Math.sin(t) * Math.cos(r)), n = i + Math.atan2(Math.sin(r) * Math.sin(t) * Math.cos(e), Math.cos(t) - Math.sin(e) * Math.sin(o)); return n = (n + 3 * Math.PI) % (2 * Math.PI) - Math.PI, new google.maps.LatLng(o.toDeg(), n.toDeg()) }, GoogleRadar.prototype.bearingTo = function (a, t) { var r = a.lat().toRad(), e = t.lat().toRad(), i = (t.lng() - a.lng()).toRad(), o = Math.sin(i) * Math.cos(e), n = Math.cos(r) * Math.sin(e) - Math.sin(r) * Math.cos(e) * Math.cos(i), s = Math.atan2(o, n); return (s.toDeg() + 360) % 360 };